OnFileDrop2
{
	_filepath = SPLITPATH(reference0)
	_filename = _filepath[2]
	_fileext = TOLOWER(_filepath[3])
	case _fileext
	{
		when ".jpg", ".jpeg", ".bmp", ".png"
		{
			Wallpaperfile = reference0
			
			"\0\s[0]The file you dropped is %(_filename)%(_fileext).\w8\1\s[10]How would you like us to set this picture as your wallpaper?\n\n[half]/
			\![*]\q[Centered,SetWallpaper_0]\n/
			\![*]\q[Tiled,SetWallpaper_1]\n/
			\![*]\q[Stretched,SetWallpaper_2]\n\n[half]/
			\![*]\q[No thanks,SetWallpaper_Cancel]\e"
		}
		when ".mid", ".wav", ".mp3", ".wma", ".au" 
		{
			"\0\s[0]%(_filename)%(_fileext) is a music file.\e"
		}
		others 
		{
			"\0\s[0]This is %(_filename)%(_fileext).\e"
		}
	}
}

Select.SetWallpaper_0
{
	"\![set,wallpaper,%(Wallpaperfile),center]\0\s[0]The image is centered.\e"
}
Select.SetWallpaper_1
{
	"\![set,wallpaper,%(Wallpaperfile),tile]\0\s[0]The image is tiled.\e"
}
Select.SetWallpaper_2
{
	"\![set,wallpaper,%(Wallpaperfile),stretch]\0\s[0]The image is stretched.\e"
}
Select.SetWallpaper_Cancel
{
	"\0\s[0]You decide against setting the file as your desktop background.\e"
}

 
OnInstallBegin
 {
	"\0\s[0]You proceed to install the file.\e"
 }

 
OnInstallComplete
 {
	"\0" //this means your main character will be speaking first, therefore the \s[] at the beginning of each line will be defining your main character's pose.
 	--
	if reference0 == "shell" //This is checking to see if what you installed is classified as a shell in the install.txt. Remember the line in install.txt that said type,ghost or type,shell? This is why that line is important, that's what tells the program what it's installing like so.
 	{	
		if reference1 == "Hypothetical Shell that doesn't actually exist" //This is the name of your shell as you defined in descript.txt in the shell folder.
		{
		"\s[0]We have installed Hypothetical Shell.\w8\1\s[10]Truncated for space.\e"
		//Replace if needed.
		}
		elseif reference1 == "Another totally real shell wow" //As in other files, you can use elseif to expand a list like this to include as many shells as you have or think you'll make. See bootend.dic for more details about elseif.
		{
		"\s[0]We have installed another totally real shell.\e"
		//Replace if needed.
		}
		else //For any other shell they may install.
		{
		"\s[0]We've installed a new shell.\w8\1\s[10]It's called  %(reference1).\e"
		//%(reference1) here would be the name of the shell they installed. Replace if needed.
		}
 	}
	elseif reference0 == "ghost" 
 	{
		"\s[0]You've installed %(reference1).\e"
 	}
	elseif reference0 == "balloon"
 	{
		"\s[0]You've installed %(reference1).\e"
 	}
	elseif reference0 == "plugin"
 	{
		"\s[0]You've installed %(reference1).\e"
 	}
	elseif reference0 == "calendar skin" 
	{
		"\s[0]You've installed %(reference1).\e"
	}
	else 
	{
		"\s[0]You've installed %(reference1).\e"
	}
}


OnInstallFailure
 {
	"\0\s[2]The installation has failed.\n\n[half]\w5" 
	--
	if reference0 == "unsupported"
	{
	"This file is unsupported.\e"
	}	
	elseif reference0 == "extraction"
	{
	"The file could not be extracted properly.\e"
	}
 }
 
 
OnInstallRefuse
 {
	"\0\s[2]%(username) can't install this. Try %(reference0) instead.\e"
 }

OnVanishSelecting
{
	"\0\s[2]You consider returning %(username) to the wild.\e"
}

OnVanishSelected
{
	"\0\s[2]You decided to return %(himher) to the wild... Bye, %username!\w9\w9\e"
}

OnVanishCancel
{
	"\0\s[0]You're not ready to send %(himher) off just yet.\e"
}

OnVanishButtonHold
{
	"\0\s[2]%(username) looks at you in confusion, but doesn't seem to have noticed what just happened.\e"
}

 
OnVanished
 {
	"\0\s[2]%(reference0) has been uninstalled.\e"
}
 
OnBIFFBegin
 {
	"\0\s[0]You tell %(username) to go fetch the mail!\e"
 }
 
OnBIFFComplete
 {
	if reference0 == 0 
 	{
 		"\0\s[2]%(username couldn't find any mail...\e"
	}
	elseif reference0 == 1 
 	{
 		"\0\s[8]%(username) brought you a letter!\e"
	}
	elseif reference0 > 1 && reference0 < 11 
	{
		"\0\s[8]%(username) brought you %(reference0) letters!\e"
	}
	elseif reference0 > 100 
	{
		"\0\s[2]%(username) brought you %(reference0) letters!\w8\n\nThere's so many, they're spilling out of %(hisher) mouth.\e"
	}
 	else 
	{
		"\0\s[8]%(username) brought you %(reference0) letters!\e"
 	}
}

 
OnBIFFFailure
 {
	if reference0 == "timeout" 
 	{
 		"\0\s[2]The connection has timed out...\e"
	}
 	elseif reference0 == "kick" 
	{
		"\0\s[2]%(username) can't open the mailbox...\e"
 	}
	elseif reference0 == "defect" 
 	{
 		"\0\s[2]%(username) can't find the mailbox without proper instructions! Be sure you're thorough with your directions!\w8\![open,configurationdialog]\e"
	}
 	else
	{
		"\0\s[0]%(username) came back with an odd letter that reads '%(reference[0])'.\e"
 	}
}


 //**** Network Update *****************************************************************
 //The following functions are for the Network Update of your ghost, where it will connect to your website, check for new files, and update itself. This is a handy feature, but tricky to set up. If you have no intention of using Network Update, you can disregard these, but it won't hurt to fill them out anyway just in case. More details about how to set up Network Update are in the walkthrough (http://www.ashido.com/ukagaka/).
 
 //Replace the dialogue in the next set of functions as appropriate. You can easily test these messages using the Developer panel. Go to Open at the bottom of it and choose one of the four Update Event options to simulate a Ghost's update process. I highly recommend doing this at LEAST once if you're going to use this feature to make sure it flows well.

 
 //---- OnUpdateBegin -------------------------------------------------------------
 //When you first tell your ghost to update. An introductory statement, like OnBIFFBegin above. Replace or add more dialogue as appropriate. Note that they end with \w8 to give a little breather time.
 
OnUpdateBegin
 {
	"\0\s[0]Starting the update process.\w8\e"
 }

 //---- OnUpdateReady ---------------------------------------------------------
 //If the ghost finds new files to update with.
 
OnUpdateReady
 {
 
	reference0++ //makes sure it starts at 1 instead of 0
	
    "\0\s[0]There are %(reference0) new files.\w8\e"
	
	//reference0 here storing the number of new files. You don't have to use it if you don't want to.
 }


//---- OnUpdateComplete -------------------------------------------------------------
//When the ghost has finished the update process.

OnUpdateComplete
 {
	if reference0 == "none" //if the ghost had nothing to update with
 	{
 		"\0\s[0]There are no new files.\e"
	}
 	else //if the ghost has updated successfully
	{
		"\0\s[0]Update successful!\e"
 	}
}

 //---- OnUpdateFailure -------------------------------------------------------------
 //Error messages if the update process fails in some way.
 
OnUpdateFailure
 {
	if reference0 == "timeout" //if the connection times out
 	{
 		"\0\s[2]The update connection has timed out.\e"
	}
 	elseif reference0 == "md5 miss" //This is the final message displayed when you've run into an md5 error below at some point.
	{
		"\0\s[2]The MD5 hash of the files don't match.\e"
 	}
	else //for other errors
 	{
 		"\0\s[2]The update could not be completed.\w8\0\s[0]The error is '%(reference0)'.\e"
	}
 }


 //---- OnUpdate.OnDownloadBegin ------------------------------------------------
 //This dialogue plays when they begin downloading a new file. WARNING: if you have big plans for your ghost and are going to make a lot of new image files for it (like... i do, cough) at some point, you're going to want to make these messages very brief, if you even have them at all. The reason is because the user will see these messages for EVERY individual file that they have to download, and if you have, say, 50 pna files in the queue, they will see this dialogue 50 times. Not only that, but displaying the dialogue takes some time, so it also extends the download process.
 //If you aren't planning on adding a ton of files at any point, or are only intending to update the .dic files which will be at most a handful of files, then you can go ahead and put a short message in here. But if your ghost is going to grow in leaps and bounds as you work on it, try and keep these messages as brief as possible (or again, just make it "" to have there be no message at all) to make the process that much faster for your user.
 
OnUpdate.OnDownloadBegin
 {
 	if "aitalk" _in_ reference0 //this is checking to see what kind of files are being downloaded. In this case, it's looking for files called aitalk in the download queue. If you want to have a specialized bit of dialogue for each type of file, you can expand this with elseifs and by replacing aitalk with whatever file you have in mind. Keep in mind my warning above though.
 	{
 		"\0\s[0]You decide to download more dialogue.\e"
 	}
 	else //for files not specified above
 	{
	"\0\s[0]%(username) found a new file.\e"
	}
 }

 //---- OnUpdate.OnMD5CompareBegin ---------------------------------------------------
 //This checks the hash value of the files in the directory and the files listed in updates.dau, I believe. It will do this for every file the user downloads, so I again remind you of my warning above! For every file they download, they will have to go through three sets of unique dialogue, and it can get old fast. Not to mention it slows things down a lot. Again, I would recommend keeping this very brief, if not just replacing it with "..." or "" instead.
 
OnUpdate.OnMD5CompareBegin
 {
	"\0\s[0]Checking the MD5 value.\e"
 }

 //---- OnUpdate.OnMD5CompareComplete --------------------------------------------------
 //After they've checked the MD5 value and it matches. See above about the length of this message.
 
OnUpdate.OnMD5CompareComplete
 {
	"\0\s[0]MD5 check good.\e"
}

 //---- OnUpdate.OnMD5CompareFailure ---------------------------------------------------
 //If the MD5 values don't match, meaning if the file is missing or damaged or incomplete in some way. If you follow my Network Update directions carefully, this shouldn't come up very often, but don't be surprised if you run into it every now and then by forgetting a file here or there.
 
OnUpdate.OnMD5CompareFailure
 {
	"\0\s[2]The MD5 values don't match.\w8\e"
 }

 
 
 //**** Headlines and RSS Feeds *********************************************************
 //This section has to do with the RSS feeds option on your ghost. If you drag and drop a url on them, they'll add it to a list you can access via the right-click menu, and they'll tell you the last set of updates for the site. This works best with RSS feeds I think, but you can experiment with other sites to see how it works.
 //The headlines you see under the tab are in the headline folder under your base SSP install. So it'd be SSP\headlines. You should see the folders for each linked headline in there. I've very rarely ever messed with them or used them. Likewise, your RSS feeds you've added will be under SSP\rss and I don't think that option will appear in the headlines/RSS tab until you add an RSS feed to a ghost. If you want to clear your RSS feeds or headlines, just delete either of those two folders.
 

 //---- OnHeadlinesenseBegin -----------------------------------------------------------
 //This dialogue comes up when you select something in your RSS feed as an intro, like the other On[Thing]Begin things we've seen so far. Replace as you need.
 
OnHeadlinesenseBegin
 {
	"\0\s[0]You've selected %(reference0).\e"
 }

 //---- OnHeadlinesense.OnFind --------------------------------------------------------
 //This actually displays the feed. My set-up for it is pretty simple but gets the job done, it just has the name of the feed, a line space, then a list of links. You shouldn't have to edit any of these and I probably wouldn't honestly.
 
OnHeadlinesense.OnFind
{
	//----  What page You're on
 	if reference2 == "First" || reference2 == "First and Last"
	{
 		//---- First page
		"\0\b2\s[0]%(reference0):"
 	}
	elseif reference2 == "Next"
 	{
		//---- Second page
 		"\0\b2\s[0]%(reference0):"
	}
 	elseif reference2 == "Last"
	{
 		//---- Last page
		"\0\b2\s[0]%(reference0):"
 	}
	--
 	//---- Headlines
	"\n\n%reference3\n"
 	--
	//---- Pages
 	if reference2 == "First" || reference2 == "Next"
	{
 		//---- Bottom buttons
		"\![*]\q[Next,] - \![*]\q[Stop,Headline_Cancel]\e"
 	}
	else
 	{
		//---- Bottom buttons
 		"\![*]\q[Stop,Headline_Cancel]\e"
 	}
	
}


Select.Headline_Cancel
{
	"\0\s[0]Headline viewing complete.\e"
	//Actually I take that back, you can change this line of dialogue here for when you're done looking at a headline to something else if you want.
}

 //---- OnHeadlinesenseComplete -------------------------------------------------------
 //This is an odd function. As far as I can gather, this is if the headline information gathering was successful, but there's no new information to report. Possibly if none of the feeds have updated? I'm a little fuzzy on this one.
 
OnHeadlinesenseComplete
 {
	"\0\s[0]No update. %(reference0).\e"
	//reference0 here supposedly always stores the value no update? Again this isn't hugely clear from what I can see. Anyway, this dialogue has never come up for me while using a ghost, so perhaps someone else who runs into it can offer more clarity. For now, you can leave it as is, or write up something else in here if you like.
 }

 //---- OnHeadlinesenseFailure ---------------------------------------------------------
 //This one is more clearly for when the ghost can't get the information it needs about the RSS feed in question.
 
OnHeadlinesenseFailure
  {
	"\0\s[2]The feed can't updated.\w8\n\n[half]" //This sets up an exchange between the two characters. The final part of the exchange continues below in the if statements.
 	--
	if reference0 == "can't download" //if they can't download the rss feed for some reason
 	{
		"It can't be downloaded."
 	}
	elseif reference0 == "can't analyze" //if they can't read the file for some reason
 	{
		"It can't be analyzed."
 	}
	else //other errors
 	{
		"..."
 	}
	--
 	"\e" //And here is the final /e, so you don't need to include it in the if statements above. Another one of the very rare cases this occurs.
}


//**** Ghost Creation and Updating ******************************************************
//These next few are related to creating updates2.dau and .nar files for your ghosts. You'll want to at least make a .nar to distribute your ghost, and if you're going to be using Network Update, you'll also want to make updates2.dau as well. It's unlikely that anyone other than you will see these messages, but you should be thorough and replace them anyway.
//Primarily, you will see these messages when you're creating your updates file or updating your ghost.nar file. More on this on the walkthrough page. However, you can drag and drop another ghost's folder onto them and they'll also create a nar for that as well, if for some reason you want to do that.


 //---- OnUpdatedataCreating -----------------------------------------------------------
 //This will begin the creation of the updates2.dau file. Not unlike the other beginning functions you've seen throughout this file. Replace with whatever you like.
 
OnUpdatedataCreating
 {
	"\0\s[00]Creating the updates2.dau file.\e"
 }

 //---- OnUpdatedataCreated -------------------------------------------------------------
 //After the updates2.dau file has been successfully created. Replace with whatever.
 
OnUpdatedataCreated
 {
	"\0\s[0]Successfully created updates2.dau.\e"
 }

 //---- OnNarCreating ------------------------------------------------------------------
 //Along the same lines, this is when they begin creating a .nar file for your ghost. .nars are the format most ghosts will be in, something similar to a .zip file, and this is the format you'll be distributing your ghost in most likely. Replace the dialogue with whatever you like.
 
OnNarCreating
 {
	"\0\s[0]Creating the .nar file.\e"
 }

 //---- OnNarCreated -------------------------------------------------------------------
 //After the nar file has been successfully created.
 
OnNarCreated
 {
	"\0\s[0]Successfully created '%(reference0)'.\e"
	//reference0 here will be the filename of the nar you just created. It should drop the nar in the folder where all your ghosts are listed, ssp\ghost\.
 }

 //****　Clock Synchronization　**********************************************************
//**** 미카 (http://homepage2.nifty.com/ko-ki/)의 사전을 참고했습니다．감사＞こ 나무 성
//This set of functions was done by the above Korean coder, I think. I'll leave their comment there untouched. 
//If you right click your ghost and go into the Utilities menu, there's an option called NTP Time Sync. That's what this is for!
 

 //----OnSNTPBegin ------------------------------------------------------------------
 //As with the others you've seen above, this is the beginning bit of dialogue for this process.
 
OnSNTPBegin
 {
	"\0\s[0]You decide to check the time.\e"
	//%(reference0) here is the site they'll be using to check your clock. I wouldn't worry too much about what the site is or where it's defined, it should be accurate. Replace the dialogue with what you need, you don't have to use reference0 if you don't want to.
 }


 //----　OnSNTPCompare----------------------------------------------------------
 //Now the ghost is going to compare the current time of your computer's system to the time of the site they connected to. Most of this you don't have to touch, just replace the dialogue as indicated.
 
OnSNTPCompare
 {
 	"Retrieved Time: %reference1[1]/%reference1[2]/%reference1[0] %reference1[3]:%reference1[4]:%reference1[5]\w2\n/
	Your Time: %reference2[1]/%reference2[2]/%reference2[0] %reference2[3]:%reference2[4]:%reference2[5]\w2\n/
 	\n"
	--
 	if reference3 == 0 //if your clock is already accurate.
	{
 		"\0\s[0]Your clock is accurate.\e" //replace this with whatever message you like.
	}
 	else //if your clock doesn't match
	{
	//you can redo this top line up to the \n\n[half] part, but leave the \q options alone.
 		"\0\s[0]Your clock doesn't match.\w6\nShould you fix it?\n\n[half]/
		\![*]\q[Fix it,OnSNTPEXECUTE]\n/
 		\![*]\q[Leave it alone,OnSNTPCANCEL]\e"
	}
 }

 //----　OnSNTPEXECUTE ------------------------------------------------------------------
 //After they've fixed your clock. Note the \6 tag - that's what actually changes the clock. Do not remove that tag. Replace the rest with what you want.
 
OnSNTPEXECUTE
 {
	"\0\s[0]The clock has been fixed.\6\e"
 }

 //----　OnSNTPCANCEL ------------------------------------------------------------------
 //If you decide not to change your clock when they tell you it doesn't match. Replace with what you want.
 
OnSNTPCANCEL
 {
	"\0\s[0]You decided not to change the clock.\e"
 }

 //----　OnSNTPFailure ------------------------------------------------------------------
 //If they can't change the clock for some reason, possibly because the site timed out but it could be anything. Replace with what you want.
 
OnSNTPFailure
 {
	"\0\s[0]The clock wasn't changed.\e"
 }


 //--OnDisplayChange----------------------------------------------------------------
 //This is when you change the resolution of your monitor while your ghost is running. Don't mess with any of this, it should be fine as is.
 
OnDisplayChange
 {
	displaybpp    = reference0
 	displaywidth  = reference1
	displayheight = reference2
 }



 //---- OnScreenSaverStart -------------------------------------------------------
 //This happens if your ghost is running when your screensaver starts up. I've never got this to trigger but I love this idea, and I feel like there's a way to do it I haven't figured out yet. So you can skip these for now if you want, but if I do ever get it working, I'll come back and make a note of it.
 
OnScreenSaverStart
 {
	"\0\s[0]The screensaver is starting.\e"
	//Replace with what you want.
 }

 //---- OnScreenSaverEnd -------------------------------------------------------
 //When you wiggle your mouse and stop your screensaver.
 
OnScreenSaverEnd
 {
	"\0\s[0]The screensaver is gone.\e"
	//Replace with what you want.
 }


 //---- OnApplicationBoot ---------------------------------------------------------------
 //This supposedly is for when a program starts but I have honestly never gotten it to work or seen it happen. I wouldn't sweat these three related functions too much.
 
OnApplicationBoot
 {
	"\0\s[0]%(reference0) just started.\e"
 }

 //---- OnApplicationClose --------------------------------------------------------------
 //See above, but for the program closing.
 
OnApplicationClose
 {
	"\0\s[0]%(reference0) has closed.\e"
 }

 //---- OnApplicationFileOpen ----------------------------------------------------------
 //I believe this is for when the program detailed above opens a document file of some kind.
 
OnApplicationFileOpen
 {
	"\0\s[0]Opening %(reference1).\e"
 }



 
OnBatteryLow
 {
	"\0\s[2]%(username) squeaks and nudges you to remind you to plug in your computer soon.\e"
 }
 
OnBatteryCritical
{
	"\0\s[2]%(username) squeaks more insistently to get your attention. Your battery is critically low!\e"
}
 
OnShellScaling
{
	if reference0 >= 150 
	{
		"\0\s[8]%(username) is bigger now!\e"
	}
	elseif reference0 == 100 
	{
		"\0\s[8]%(username) is back to normal!\e"
	}
	elseif reference0 == 50 
	{
		"\0\s[8]%(username) is tiny now!\e"
	}
}